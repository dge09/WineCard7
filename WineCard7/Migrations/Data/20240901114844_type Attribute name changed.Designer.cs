// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WineCard7.DB;

#nullable disable

namespace WineCard7.Migrations.Data
{
    [DbContext(typeof(DataContext))]
    [Migration("20240901114844_type Attribute name changed")]
    partial class typeAttributenamechanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardWine", b =>
                {
                    b.Property<int>("CardsID")
                        .HasColumnType("int");

                    b.Property<int>("WinesID")
                        .HasColumnType("int");

                    b.HasKey("CardsID", "WinesID");

                    b.HasIndex("WinesID");

                    b.ToTable("CardWine");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.Card", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.WGrapeVariety", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("GrapeVarietys");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.WOriginCountry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("OriginCountrys");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.WOriginFederalState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("OriginFederalStates");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.WPrice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("PriceperBottle")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.WType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.WWinery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Winerys");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.WYear", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.Wine", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GrapeVarietyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OriginCountryID")
                        .HasColumnType("int");

                    b.Property<int>("OriginFederalStateID")
                        .HasColumnType("int");

                    b.Property<int>("PriceID")
                        .HasColumnType("int");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<int>("WineryID")
                        .HasColumnType("int");

                    b.Property<int>("YearID")
                        .HasColumnType("int");

                    b.Property<int>("YearÎD")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GrapeVarietyID");

                    b.HasIndex("OriginCountryID");

                    b.HasIndex("OriginFederalStateID");

                    b.HasIndex("PriceID");

                    b.HasIndex("TypeID");

                    b.HasIndex("WineryID");

                    b.HasIndex("YearID");

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("CardWine", b =>
                {
                    b.HasOne("WineCard7.DB.Entitys.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCard7.DB.Entitys.Wine", null)
                        .WithMany()
                        .HasForeignKey("WinesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WineCard7.DB.Entitys.Wine", b =>
                {
                    b.HasOne("WineCard7.DB.Entitys.WGrapeVariety", "GrapeVariety")
                        .WithMany()
                        .HasForeignKey("GrapeVarietyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCard7.DB.Entitys.WOriginCountry", "OriginCountry")
                        .WithMany()
                        .HasForeignKey("OriginCountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCard7.DB.Entitys.WOriginFederalState", "OriginFederalState")
                        .WithMany()
                        .HasForeignKey("OriginFederalStateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCard7.DB.Entitys.WPrice", "Price")
                        .WithMany()
                        .HasForeignKey("PriceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCard7.DB.Entitys.WType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCard7.DB.Entitys.WWinery", "Winery")
                        .WithMany()
                        .HasForeignKey("WineryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WineCard7.DB.Entitys.WYear", "Year")
                        .WithMany()
                        .HasForeignKey("YearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrapeVariety");

                    b.Navigation("OriginCountry");

                    b.Navigation("OriginFederalState");

                    b.Navigation("Price");

                    b.Navigation("Type");

                    b.Navigation("Winery");

                    b.Navigation("Year");
                });
#pragma warning restore 612, 618
        }
    }
}
