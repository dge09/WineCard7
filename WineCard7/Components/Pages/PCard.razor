@page "/pCard"
@using WineCard7.DB
@using WineCard7.DB.DTOs
@using WineCard7.DB.Entitys
@using WineCard7.DB.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBaseServices<Card> cardServices
@inject IBaseServices<WGrapeVariety> grapeVarietyServices
@inject IBaseServices<Wine> wineServices
@inject IBaseServices<WLocation> locationServices
@inject IBaseServices<WOriginCountry> originCountryServices
@inject IBaseServices<WOriginFederalState> originFederalStateServices
@inject IBaseServices<WPrice> priceServices
@inject IBaseServices<WType> typeServices
@inject IBaseServices<WWinery> wineryServices
@inject IBaseServices< WYear > yearServices
@rendermode InteractiveServer

<PageTitle>Karten</PageTitle>


@if (userIsAuthenticated)
{
    <h1>Weinkarten:</h1>

    @if (ShowDetailsModal)
    {
        <dialog open="@ShowDetailsModal">
            <div>
                <label>Name: @NewCard.Name</label>
            </div>
            <div>
                <label>Beschreibung: @NewCard.Description</label>
            </div>
            <div>
                <table>
                    <thead>
                        <tr>
                            <th>Weinname</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Wine wine in Wines)
                        {
                            <tr>
                                <td>@wine.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
            <div>
                <button @onclick="CloseDialog">Zurück</button>
            </div>
        </dialog>

    }

    @if (ShowCreateModal)
    {
        <dialog open="@ShowCreateModal">
            <div>
                <label>Name:</label>
                <InputText @bind-Value="NewCard.Name"></InputText>
            </div>
            <div>
                <label>Beschreibung:</label>
                <InputText @bind-Value="NewCard.Description"></InputText>
            </div>
            <div>
               <table>
                   <thead>
                       <tr>
                           <th>Weinname</th>
                           <th>Hinzufügen</th>
                       </tr>
                   </thead>
                   <tbody>
                       @foreach (CardWineDTO dto in WinesOfCard)
                       {
                           <tr>
                               <td>@dto.Wine.Name</td>
                               <tb>
                                   <InputCheckbox @bind-Value="@dto.IsPartOfCard" @onchange="() => ChangeWineStateInCard(dto.Wine)"></InputCheckbox>
                               </tb>
                           </tr>
                       }
                   </tbody>
               </table>
                
            </div>
            <div>
                <button @onclick="CloseDialog">Zurück</button>
                <button @onclick="CreateAsync">Speichern</button>
            </div>
        </dialog>

    }

    @if (ShowUpdateModal)
    {
        <dialog open="@ShowUpdateModal">
            <div>
                <label>Name:</label>
                <InputText @bind-Value="NewCard.Name"></InputText>
            </div>
            <div>
                <label>Preis:</label>
                <InputNumber @bind-Value="NewCard.Description"></InputNumber>
            </div>
            <div>
                <button @onclick="CloseDialog">Zurück</button>
                <button @onclick="UpdateAsync">Speichern</button>
            </div>
        </dialog>

    }

    @if (ShowDeleteModal)
    {
        <dialog open="@ShowDeleteModal">
            <div>
                <label>Name: @NewCard.Name</label>
            </div>
            <div>
                <label>Preis: NewCard.Description</label>
            </div>
            <div>
                <button @onclick="CloseDialog">Zurück</button>
                <button @onclick="DeleteAsync">Löschen</button>
            </div>
        </dialog>
    }




    <button @onclick="ShowCreatePage">Hinzufügen</button>

    <table class="table table-striped table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Beschreibung</th>
                <th>Details</th>
                <th>Bearbeiten</th>
                <th>Löschen</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Card card in Cards)
            {
                <tr>
                    <td>@card.Name</td>
                    <td>@card.Description</td>
                    <td>
                        <button @onclick="() => ShowDetailsPage(card)">Details</button>
                    </td>
                    <td>
                        <button @onclick="() => ShowUpdatePage(card)">Bearbeiten</button>
                    </td>
                    <td>
                        <button @onclick="() => ShowDeletePage(card)">Löschen</button>
                    </td>
                </tr>

            }
        </tbody>
    </table>
}
else
{
    <h1>You need to Login First!</h1>
}


@code {
    private List<Card> Cards = new List<Card>();
    private List<Wine> Wines = new List<Wine>();
    private List<WGrapeVariety> GrapeVarietys = new List<WGrapeVariety>();
    private List<WOriginCountry> OriginCountrys = new List<WOriginCountry>();
    private List<WOriginFederalState> OriginFederalStates = new List<WOriginFederalState>();
    private List<WPrice> Prices = new List<WPrice>();
    private List<WType> Types = new List<WType>();
    private List<WWinery> Winerys = new List<WWinery>();
    private List<WYear> Years = new List<WYear>();

    private List<CardWineDTO> WinesOfCard = new();

    private bool ShowCreateModal = false;
    private bool ShowDetailsModal = false;
    private bool ShowUpdateModal = false;
    private bool ShowDeleteModal = false;

    private Card NewCard = new();
    private Card SelectedCard = new();

    private bool userIsAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await UpdateListsAsync();
        // await GenerateNewWineAsync();

        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        userIsAuthenticated = authState.User.Identity.IsAuthenticated;
        // var user = authState.User;

        await base.OnInitializedAsync();

    }

    private async Task CreateAsync()
    {
        NewCard.Wines = GetCardWinesValues();

        await cardServices.CreateAsync(NewCard);

        await UpdateListsAsync();

        CloseDialog();
    }

    private async Task UpdateAsync()
    {
        SelectedCard.Wines = GetCardWinesValues();

        await cardServices.UpdateAsync(SelectedCard);

        await UpdateListsAsync();

        CloseDialog();
    }

    private async Task DeleteAsync()
    {
        await cardServices.DeleteByIDAsync(SelectedCard.ID);

        await UpdateListsAsync();

        CloseDialog();
    }

    private List<Wine> GetCardWinesValues()
    {
        List<Wine> winesOfCard = new();

        foreach (CardWineDTO dto in WinesOfCard)
        {
            if (dto.IsPartOfCard)
            {
                winesOfCard.Add(dto.Wine);
            }
        }

        return winesOfCard;

    }

    private void CloseDialog()
    {
        ShowDetailsModal = false;
        ShowCreateModal = false;
        ShowUpdateModal = false;
        ShowDeleteModal = false;
    }

    private async Task ShowCreatePage()
    {
        NewCard = new();
        NewCard.Name = "Neue Weinkarte";
        NewCard.Description = "Weinkarte für ...";
        ResetCardWineDTOList();

        ShowCreateModal = true;
    }

    private async Task ShowDetailsPage(Card card)
    {
        using (DataContext dataContext = new())
        {
            await dataContext.Entry(card).Collection(c => c.Wines).LoadAsync();
        }

        SelectedCard = card;
        SelectedCard.Wines = card.Wines;

        ShowDetailsModal = true;
    }

    private async Task ShowUpdatePage(Card card)
    {
        SelectedCard = card;

        using (DataContext dataContext = new())
        {
            await dataContext.Entry(card).Collection(c => c.Wines).LoadAsync();
        }


        ShowUpdateModal = true;
    }


    private void ShowDeletePage(Card card)
    {
        SelectedCard = card;

        ShowDeleteModal = true;
    }


    private async Task UpdateListsAsync()
    {
        GrapeVarietys = await grapeVarietyServices.GetAllAsync();
        OriginCountrys = await originCountryServices.GetAllAsync();
        OriginFederalStates = await originFederalStateServices.GetAllAsync();
        Types = await typeServices.GetAllAsync();
        Winerys = await wineryServices.GetAllAsync();
        Prices = await priceServices.GetAllAsync();
        Years = await yearServices.GetAllAsync();
        Cards = await cardServices.GetAllAsync();
        Wines = await wineServices.GetAllAsync();
    }

    private void ResetCardWineDTOList()
    {
        WinesOfCard.Clear();

        foreach (Wine wine in Wines)
        {
            CardWineDTO cwDto = new();

            cwDto.Wine = wine;
            cwDto.IsPartOfCard = false;


            WinesOfCard.Add(cwDto);
        }
    }

    private void ChangeWineStateInCard(Wine wine)
    {
        WinesOfCard.Where(x => x.Wine == wine).First().IsPartOfCard = true;
    }
}